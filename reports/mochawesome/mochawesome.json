{
  "stats": {
    "suites": 2,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-28T10:24:46.725Z",
    "end": "2023-10-28T10:24:54.287Z",
    "duration": 7562,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "175fa4f8-96ad-4646-8ecf-2262aab1e80c",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "1c765195-7864-49df-b74a-d14dba73f370",
        "title": "API Comparator Tests",
        "fullFile": "/Users/fathirwafda/project/interview/allofresh/api-comparator/tests/apiComparator.test.js",
        "file": "/tests/apiComparator.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return true for equal responses",
            "fullTitle": "API Comparator Tests should return true for equal responses",
            "timedOut": false,
            "duration": 600,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Here we're assuming that the requests are to the same URLs set up in the mocks\nconst response1 = await chai.request('https://reqres.in').get('/api/users/3');\nconst response2 = await chai.request('https://reqres.in').get('/api/users/3');\nexpect(response1.status).to.equal(response2.status);\nexpect(response1.body).to.deep.equal(response2.body);",
            "err": {},
            "isRoot": false,
            "uuid": "c5a5d2c9-941a-497d-8b72-c11fba1cb3dc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should detect when responses are not equal",
            "fullTitle": "API Comparator Tests should detect when responses are not equal",
            "timedOut": false,
            "duration": 311,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response1 = await chai.request('https://reqres.in').get('/api/users/3');\n    const response2 = await chai.request('https://reqres.in').get('/api/users/4');\n    expect(response1.body).to.not.deep.equal(response2.body);",
            "err": {},
            "isRoot": false,
            "uuid": "5b2b9624-1b24-4248-9bed-29bad83e3e0d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should handle cases where one API fails",
            "fullTitle": "API Comparator Tests should handle cases where one API fails",
            "timedOut": false,
            "duration": 2067,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response1 = await chai.request('https://reqres.in').get('/api/users/3');\n    const response2 = await chai.request('https://reqres.in').get('/api/users/3000000');\n    // Try-catch is necessary to handle the error thrown for the bad response\n    try {\n      // If the response was bad, we shouldn't hit this line\n      throw new Error('Expected an error for the second request, but got none.');\n    } catch (error) {\n      // We expect an error here, so in the catch block, we confirm it's for the right reasons\n      expect(response1.status).to.equal(200)\n      expect(response2.status).to.equal(404); // Confirm it's the error we're expecting\n    }",
            "err": {},
            "isRoot": false,
            "uuid": "23837a42-e2e0-4aea-9e0c-5f9e19605a21",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c5a5d2c9-941a-497d-8b72-c11fba1cb3dc",
          "5b2b9624-1b24-4248-9bed-29bad83e3e0d",
          "23837a42-e2e0-4aea-9e0c-5f9e19605a21"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2978,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      },
      {
        "uuid": "c6c771cd-03e2-46e3-9b80-bef2a15a8dde",
        "title": "Comparator Library",
        "fullFile": "/Users/fathirwafda/project/interview/allofresh/api-comparator/tests/apiFileComparator.test.js",
        "file": "/tests/apiFileComparator.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should compare responses correctly",
            "fullTitle": "Comparator Library should compare responses correctly",
            "timedOut": false,
            "duration": 4568,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const comparator = new Comparator('data-files/file1.txt', 'data-files/file2.txt');\nconst results = await comparator.compare();\nresults.forEach(result => {\n    console.log(`${result.url1} ${result.equal ? 'equals' : 'not equals'} ${result.url2}`);\n});\nexpect(results).to.be.an('array');",
            "err": {},
            "isRoot": false,
            "uuid": "f67b0447-bb29-448a-9fc1-dcf118fdb2ef",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not crash with empty files",
            "fullTitle": "Comparator Library should not crash with empty files",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const comparator = new Comparator('data-files/emptyFile1.txt', 'data-files/emptyFile2.txt');\n        const results = await comparator.compare();\n        // If files are empty, the results should be an empty array since there are no URLs to compare\n        expect(results).to.be.an('array').that.is.empty;",
            "err": {},
            "isRoot": false,
            "uuid": "2430bff3-e767-4eae-b06b-97106cc436cf",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f67b0447-bb29-448a-9fc1-dcf118fdb2ef",
          "2430bff3-e767-4eae-b06b-97106cc436cf"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 4569,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 180000
  },
  "copyrightYear": 2023
}