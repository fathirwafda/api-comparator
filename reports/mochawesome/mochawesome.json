{
  "stats": {
    "suites": 2,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-28T15:02:55.162Z",
    "end": "2023-10-28T15:03:00.394Z",
    "duration": 5232,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "34982d2f-e3b6-4e49-92d6-0d1925c301f6",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "ba39f083-229b-4ab9-a502-9d72e0cdf5f9",
        "title": "API Comparator Tests",
        "fullFile": "/Users/fathirwafda/project/interview/allofresh/api-comparator/tests/apiComparator.test.js",
        "file": "/tests/apiComparator.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return true for equal responses",
            "fullTitle": "API Comparator Tests should return true for equal responses",
            "timedOut": false,
            "duration": 537,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Here we're assuming that the requests are to the same URLs set up in the mocks\nconst response1 = await chai.request('https://reqres.in').get('/api/users/3');\nconst response2 = await chai.request('https://reqres.in').get('/api/users/3');\nexpect(response1.status).to.equal(response2.status);\nexpect(response1.body).to.deep.equal(response2.body);",
            "err": {},
            "isRoot": false,
            "uuid": "be7c0b9c-7544-4114-836b-95f4effadc8d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should detect when responses are not equal",
            "fullTitle": "API Comparator Tests should detect when responses are not equal",
            "timedOut": false,
            "duration": 890,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response1 = await chai.request('https://reqres.in').get('/api/users/3');\n    const response2 = await chai.request('https://reqres.in').get('/api/users/4');\n    expect(response1.body).to.not.deep.equal(response2.body);",
            "err": {},
            "isRoot": false,
            "uuid": "1200186c-a320-4d2f-b918-0c6374139c35",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should handle cases where one API fails",
            "fullTitle": "API Comparator Tests should handle cases where one API fails",
            "timedOut": false,
            "duration": 1024,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response1 = await chai.request('https://reqres.in').get('/api/users/3');\n    const response2 = await chai.request('https://reqres.in').get('/api/users/3000000');\n    // Try-catch is necessary to handle the error thrown for the bad response\n    try {\n      // If the response was bad, we shouldn't hit this line\n      throw new Error('Expected an error for the second request, but got none.');\n    } catch (error) {\n      // We expect an error here, so in the catch block, we confirm it's for the right reasons\n      expect(response1.status).to.equal(200)\n      expect(response2.status).to.equal(404); // Confirm it's the error we're expecting\n    }",
            "err": {},
            "isRoot": false,
            "uuid": "c70a90cd-55ee-4167-9968-a93f5d69d75c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "be7c0b9c-7544-4114-836b-95f4effadc8d",
          "1200186c-a320-4d2f-b918-0c6374139c35",
          "c70a90cd-55ee-4167-9968-a93f5d69d75c"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2451,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      },
      {
        "uuid": "6c38b8ef-b182-46cb-877d-22919ae7e8f2",
        "title": "API Comparator for mass data",
        "fullFile": "/Users/fathirwafda/project/interview/allofresh/api-comparator/tests/apiFileComparator.test.js",
        "file": "/tests/apiFileComparator.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should compare responses correctly",
            "fullTitle": "API Comparator for mass data should compare responses correctly",
            "timedOut": false,
            "duration": 2770,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const comparator = new Comparator('data-files/file1.txt', 'data-files/file2.txt');\nconst results = await comparator.compare();\nresults.forEach(result => {\n    console.log(`${result.url1} ${result.equal ? 'equals' : 'not equals'} ${result.url2}`);\n});\nexpect(results).to.be.an('array');",
            "err": {},
            "isRoot": false,
            "uuid": "f7a8d34f-7884-46af-9b88-565d2bfbe3f3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not crash with empty files",
            "fullTitle": "API Comparator for mass data should not crash with empty files",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const comparator = new Comparator('data-files/emptyFile1.txt', 'data-files/emptyFile2.txt');\n        const results = await comparator.compare();\n        // If files are empty, the results should be an empty array since there are no URLs to compare\n        expect(results).to.be.an('array').that.is.empty;",
            "err": {},
            "isRoot": false,
            "uuid": "762351c3-193f-49c4-9ff9-f7bc303f6add",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f7a8d34f-7884-46af-9b88-565d2bfbe3f3",
          "762351c3-193f-49c4-9ff9-f7bc303f6add"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2771,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 180000
  },
  "copyrightYear": 2023
}